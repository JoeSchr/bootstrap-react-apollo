#!/bin/bash
set -e
 NODE_ENV=development

if [ ! -f package.json ]; then
  echo "Please run via 'yarn setup'; do not call this script directly" >&2
  exit 1
fi

if [ -x .env ]; then
  . .env

  fail () {
    echo ".env already exists, but it doesn't define $1 - aborting!"
    exit 1;
  }

  if [ "$DATABASE_OWNER_PASSWORD" = "" ]; then fail DATABASE_OWNER_PASSWORD; fi;
  if [ "$DATABASE_AUTHENTICATOR_PASSWORD" = "" ]; then fail DATABASE_AUTHENTICATOR_PASSWORD; fi;
  if [ "$DATABASE_HOST" = "" ]; then fail DATABASE_HOST; fi;
  if [ "$DATABASE_OWNER" = "" ]; then fail DATABASE_OWNER; fi;

  echo "Configuration already exists, using existing secrets."
else

  echo "What's the hostname of your database? [Enter for default ("db")]"
  read DATABASE_HOST
  if [ "$DATABASE_HOST" = "" ]; then DATABASE_HOST="db"; fi

  echo "What's the name of the database you wish to use?"
  read DATABASE_NAME
  if [[ "$DATABASE_NAME" =~ ^[a-z][a-z0-9_]+$ ]]; then
    echo "Database name '${DATABASE_NAME}' looks okay"
    DATABASE_OWNER=${DATABASE_NAME}
  else
    echo "Invalid DATABASE_NAME: '${DATABASE_NAME}' - must be lower case alphanumeric" >&2
    exit 3
  fi

  # This will generate passwords that are safe to use in envvars without needing to be escaped:
  DATABASE_OWNER_PASSWORD="$(openssl rand -base64 30 | tr '+/' '-_')"
  DATABASE_AUTHENTICATOR="${DATABASE_NAME}_authenticator"
  DATABASE_AUTHENTICATOR_PASSWORD="$(openssl rand -base64 30 | tr '+/' '-_')"
  DATABASE_VISITOR="${DATABASE_NAME}_visitor"

  # This is our '.env' config file, we're writing it now so that if something goes wrong we won't lose the passwords.
  cat >> .env <<CONFIG
### THIS IS AUTOGENERATED AND WILL BE RESETED BY ./setup ###

## no EXPORT, no "", because it gets source by docker directly
# If you're financially supporting PostGraphile's development, add your license key from https://store.graphile.com here.
GRAPHILE_LICENSE=

# This is a development environment (production wouldn't write envvars to a file)
NODE_ENV=development

# Where's the DB, and who owns it?
DATABASE_HOST=${DATABASE_HOST}
DATABASE_NAME=${DATABASE_NAME}
DATABASE_OWNER=${DATABASE_OWNER}
DATABASE_OWNER_PASSWORD=$DATABASE_OWNER_PASSWORD

# Used by docker postgres as default variables
POSTGRES_USER=${DATABASE_NAME}
POSTGRES_PASSWORD=$DATABASE_OWNER_PASSWORD
POSTGRES_DB=${DATABASE_NAME}

# Password for the '${DATABASE_AUTHENTICATOR}' user, which has very limited
# privileges, but can switch into '${DATABASE_VISITOR}'
DATABASE_AUTHENTICATOR=${DATABASE_AUTHENTICATOR}
DATABASE_AUTHENTICATOR_PASSWORD=$DATABASE_AUTHENTICATOR_PASSWORD

# Visitor role, cannot be logged into directly
DATABASE_VISITOR=${DATABASE_VISITOR}

# This secret is used for signing cookies
SECRET=$(openssl rand -base64 48)

# This secret is used for signing JWT tokens (we don't use this by default)
JWT_SECRET=$(openssl rand -base64 48)

# These are the connection strings for the DB and the test DB.
# NOTE: in production you probably want to add ?ssl=1 to force SSL usage.
# NOTE: 'psql' does not like ?ssl=1, use ?sslmode=require for psql.
DATABASE_URL=postgres://${DATABASE_OWNER}:$DATABASE_OWNER_PASSWORD@$DATABASE_HOST/${DATABASE_NAME}
AUTH_DATABASE_URL=postgres://${DATABASE_AUTHENTICATOR}:$DATABASE_AUTHENTICATOR_PASSWORD@$DATABASE_HOST/${DATABASE_NAME}
TEST_ROOT_DATABASE_URL=postgres://${DATABASE_OWNER}:$DATABASE_OWNER_PASSWORD@$DATABASE_HOST/${DATABASE_NAME}_test
TEST_AUTH_DATABASE_URL=postgres://${DATABASE_AUTHENTICATOR}:$DATABASE_AUTHENTICATOR_PASSWORD@$DATABASE_HOST/${DATABASE_NAME}_test

# This port is the one you'll connect to
PORT=5678

# This is the port that create-react-app runs as, don't connect to it directly
CLIENT_PORT=5679

# This is needed any time we use absolute URLs, e.g. for OAuth callback URLs
ROOT_DOMAIN=localhost:$PORT
ROOT_URL=http://$ROOT_DOMAIN

# Our session store uses redis
REDIS_URL=redis://localhost/3

# To enable login with GitHub, create a GitHub application by visiting
# https://github.com/settings/applications/new and then enter the Client
# ID/Secret below
#
#   Name: PostGraphile Bootstrap (Dev)
#   Homepage URL: http://localhost:5678
#   Authorization callback URL: http://localhost:5678/auth/github/callback
#
# Client ID:
GITHUB_KEY=
# Client Secret:
GITHUB_SECRET=
CONFIG
  echo "Passwords generated and configuration written to .env"

  # To source our .env file from the shell it has to be executable.
  chmod +x .env

  . .env
fi

cat <<MSG

We're going to drop (if necessary):

- database ${DATABASE_NAME}
- database ${DATABASE_NAME}_test
- database role ${DATABASE_VISITOR}
- database role ${DATABASE_AUTHENTICATOR}
- database role ${DATABASE_OWNER}

Type 'CONFIRM' to continue
MSG

read CONFIRM_DROP

if [ "$CONFIRM_DROP" != "CONFIRM" ]; then
  echo "You didn't type 'CONFIRM' so we're aborting." >&2
  exit 2;
fi

echo "Installing or reinstalling the roles and database..."
# Now we can reset the database
psql -X -v ON_ERROR_STOP=1 -h $DATABASE_HOST template1 <<SQL
-- RESET database
DROP DATABASE IF EXISTS ${DATABASE_NAME};
DROP DATABASE IF EXISTS ${DATABASE_NAME}_test;
DROP ROLE IF EXISTS ${DATABASE_VISITOR};
DROP ROLE IF EXISTS ${DATABASE_AUTHENTICATOR};
DROP ROLE IF EXISTS ${DATABASE_OWNER};

-- Now to set up the database cleanly:
-- Ref: https://devcenter.heroku.com/articles/heroku-postgresql#connection-permissions

-- This is the root role for the database
CREATE ROLE ${DATABASE_OWNER} WITH LOGIN PASSWORD '${DATABASE_OWNER_PASSWORD}'
  -- IMPORTANT: don't grant SUPERUSER in production, we only need this so we can load the watch fixtures!
  SUPERUSER;

-- This is the no-access role that PostGraphile will run as by default
CREATE ROLE ${DATABASE_AUTHENTICATOR} WITH LOGIN PASSWORD '${DATABASE_AUTHENTICATOR_PASSWORD}' NOINHERIT;

-- This is the role that PostGraphile will switch to (from ${DATABASE_AUTHENTICATOR}) during a GraphQL request
CREATE ROLE ${DATABASE_VISITOR};

-- This enables PostGraphile to switch from ${DATABASE_AUTHENTICATOR} to ${DATABASE_VISITOR}
GRANT ${DATABASE_VISITOR} TO ${DATABASE_AUTHENTICATOR};

-- Here's our main database
CREATE DATABASE ${DATABASE_NAME} OWNER ${DATABASE_OWNER};
REVOKE ALL ON DATABASE ${DATABASE_NAME} FROM PUBLIC;
GRANT CONNECT ON DATABASE ${DATABASE_NAME} TO ${DATABASE_OWNER};
GRANT CONNECT ON DATABASE ${DATABASE_NAME} TO ${DATABASE_AUTHENTICATOR};
GRANT ALL ON DATABASE ${DATABASE_NAME} TO ${DATABASE_OWNER};

-- Some extensions require superuser privileges, so we create them before migration time.
\\connect ${DATABASE_NAME}
CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;
CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;
CREATE EXTENSION IF NOT EXISTS citext WITH SCHEMA public;
CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;

-- This is a copy of the setup above for our test database
CREATE DATABASE ${DATABASE_NAME}_test OWNER ${DATABASE_OWNER};
REVOKE ALL ON DATABASE ${DATABASE_NAME}_test FROM PUBLIC;
GRANT CONNECT ON DATABASE ${DATABASE_NAME}_test TO ${DATABASE_OWNER};
GRANT CONNECT ON DATABASE ${DATABASE_NAME}_test TO ${DATABASE_AUTHENTICATOR};
GRANT ALL ON DATABASE ${DATABASE_NAME}_test TO ${DATABASE_OWNER};
\\connect ${DATABASE_NAME}_test
CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;
CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;
CREATE EXTENSION IF NOT EXISTS citext;
CREATE EXTENSION IF NOT EXISTS pgcrypto;
SQL

# All done
echo "âœ… Setup success; now running 'yarn db:migrate:dev' to run the migrations"

yarn db:migrate:dev
